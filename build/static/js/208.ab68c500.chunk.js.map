{"version":3,"file":"static/js/208.ab68c500.chunk.js","mappings":"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","sources":["app/modules/apps/user-management/users-list/core/_requests.ts","app/modules/apps/user-management/users-list/core/QueryRequestProvider.tsx","app/modules/apps/user-management/users-list/core/QueryResponseProvider.tsx","app/modules/apps/user-management/users-list/core/ListViewProvider.tsx","app/modules/apps/user-management/users-list/components/header/UsersListFilter.tsx","app/modules/apps/user-management/users-list/components/header/UserListToolbar.tsx","app/modules/apps/user-management/users-list/components/header/UsersListGrouping.tsx","app/modules/apps/user-management/users-list/components/header/UsersListSearchComponent.tsx","app/modules/apps/user-management/users-list/components/header/UsersListHeader.tsx","app/modules/apps/user-management/users-list/table/columns/CustomHeaderColumn.tsx","app/modules/apps/user-management/users-list/table/columns/CustomRow.tsx","app/modules/apps/user-management/users-list/table/columns/UserInfoCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserLastLoginCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserTwoStepsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserActionsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserCustomHeader.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionHeader.tsx","app/modules/apps/user-management/users-list/table/columns/_columns.tsx","app/modules/apps/user-management/users-list/components/loading/UsersListLoading.tsx","app/modules/apps/user-management/users-list/components/pagination/UsersListPagination.tsx","app/modules/apps/user-management/users-list/table/UsersTable.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalHeader.tsx","app/modules/apps/user-management/users-list/core/_models.ts","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalForm.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModal.tsx","app/modules/apps/user-management/users-list/UsersList.tsx","app/modules/apps/user-management/UsersPage.tsx"],"sourcesContent":["import axios, {AxiosResponse} from 'axios'\nimport {ID, Response} from '../../../../../../_metronic/helpers'\nimport {User, UsersQueryResponse} from './_models'\n\nconst API_URL = process.env.REACT_APP_THEME_API_URL\nconst USER_URL = `${API_URL}/user`\nconst GET_USERS_URL = `${API_URL}/users/query`\n\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\n  return axios\n    .get(`${GET_USERS_URL}?${query}`)\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\n}\n\nconst getUserById = (id: ID): Promise<User | undefined> => {\n  return axios\n    .get(`${USER_URL}/${id}`)\n    .then((response: AxiosResponse<Response<User>>) => response.data)\n    .then((response: Response<User>) => response.data)\n}\n\nconst createUser = (user: User): Promise<User | undefined> => {\n  return axios\n    .put(USER_URL, user)\n    .then((response: AxiosResponse<Response<User>>) => response.data)\n    .then((response: Response<User>) => response.data)\n}\n\nconst updateUser = (user: User): Promise<User | undefined> => {\n  return axios\n    .post(`${USER_URL}/${user.id}`, user)\n    .then((response: AxiosResponse<Response<User>>) => response.data)\n    .then((response: Response<User>) => response.data)\n}\n\nconst deleteUser = (userId: ID): Promise<void> => {\n  return axios.delete(`${USER_URL}/${userId}`).then(() => {})\n}\n\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\n  const requests = userIds.map((id) => axios.delete(`${USER_URL}/${id}`))\n  return axios.all(requests).then(() => {})\n}\n\nexport {getUsers, deleteUser, deleteSelectedUsers, getUserById, createUser, updateUser}\n","import {FC, useState, createContext, useContext} from 'react'\nimport {\n  QueryState,\n  QueryRequestContextProps,\n  initialQueryRequest,\n  WithChildren,\n} from '../../../../../../_metronic/helpers'\n\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\n\nconst QueryRequestProvider: FC<WithChildren> = ({children}) => {\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\n\n  const updateState = (updates: Partial<QueryState>) => {\n    const updatedState = {...state, ...updates} as QueryState\n    setState(updatedState)\n  }\n\n  return (\n    <QueryRequestContext.Provider value={{state, updateState}}>\n      {children}\n    </QueryRequestContext.Provider>\n  )\n}\n\nconst useQueryRequest = () => useContext(QueryRequestContext)\nexport {QueryRequestProvider, useQueryRequest}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\nimport {useQuery} from 'react-query'\nimport {\n  createResponseContext,\n  initialQueryResponse,\n  initialQueryState,\n  PaginationState,\n  QUERIES,\n  stringifyRequestQuery,\n  WithChildren,\n} from '../../../../../../_metronic/helpers'\nimport {getUsers} from './_requests'\nimport {User} from './_models'\nimport {useQueryRequest} from './QueryRequestProvider'\n\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\nconst QueryResponseProvider: FC<WithChildren> = ({children}) => {\n  const {state} = useQueryRequest()\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\n\n  useEffect(() => {\n    if (query !== updatedQuery) {\n      setQuery(updatedQuery)\n    }\n  }, [updatedQuery])\n\n  const {\n    isFetching,\n    refetch,\n    data: response,\n  } = useQuery(\n    `${QUERIES.USERS_LIST}-${query}`,\n    () => {\n      return getUsers(query)\n    },\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\n  )\n\n  return (\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\n      {children}\n    </QueryResponseContext.Provider>\n  )\n}\n\nconst useQueryResponse = () => useContext(QueryResponseContext)\n\nconst useQueryResponseData = () => {\n  const {response} = useQueryResponse()\n  if (!response) {\n    return []\n  }\n\n  return response?.data || []\n}\n\nconst useQueryResponsePagination = () => {\n  const defaultPaginationState: PaginationState = {\n    links: [],\n    ...initialQueryState,\n  }\n\n  const {response} = useQueryResponse()\n  if (!response || !response.payload || !response.payload.pagination) {\n    return defaultPaginationState\n  }\n\n  return response.payload.pagination\n}\n\nconst useQueryResponseLoading = (): boolean => {\n  const {isLoading} = useQueryResponse()\n  return isLoading\n}\n\nexport {\n  QueryResponseProvider,\n  useQueryResponse,\n  useQueryResponseData,\n  useQueryResponsePagination,\n  useQueryResponseLoading,\n}\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\nimport {\n  ID,\n  calculatedGroupingIsDisabled,\n  calculateIsAllDataSelected,\n  groupingOnSelect,\n  initialListView,\n  ListViewContextProps,\n  groupingOnSelectAll,\n  WithChildren,\n} from '../../../../../../_metronic/helpers'\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\n\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\n\nconst ListViewProvider: FC<WithChildren> = ({children}) => {\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\n  const {isLoading} = useQueryResponse()\n  const data = useQueryResponseData()\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\n\n  return (\n    <ListViewContext.Provider\n      value={{\n        selected,\n        itemIdForUpdate,\n        setItemIdForUpdate,\n        disabled,\n        isAllSelected,\n        onSelect: (id: ID) => {\n          groupingOnSelect(id, selected, setSelected)\n        },\n        onSelectAll: () => {\n          groupingOnSelectAll(isAllSelected, setSelected, data)\n        },\n        clearSelected: () => {\n          setSelected([])\n        },\n      }}\n    >\n      {children}\n    </ListViewContext.Provider>\n  )\n}\n\nconst useListView = () => useContext(ListViewContext)\n\nexport {ListViewProvider, useListView}\n","import {useEffect, useState} from 'react'\nimport {MenuComponent} from '../../../../../../../_metronic/assets/ts/components'\nimport {initialQueryState, KTIcon} from '../../../../../../../_metronic/helpers'\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\n\nconst UsersListFilter = () => {\n  const {updateState} = useQueryRequest()\n  const {isLoading} = useQueryResponse()\n  const [role, setRole] = useState<string | undefined>()\n  const [lastLogin, setLastLogin] = useState<string | undefined>()\n\n  useEffect(() => {\n    MenuComponent.reinitialization()\n  }, [])\n\n  const resetData = () => {\n    updateState({filter: undefined, ...initialQueryState})\n  }\n\n  const filterData = () => {\n    updateState({\n      filter: {role, last_login: lastLogin},\n      ...initialQueryState,\n    })\n  }\n\n  return (\n    <>\n      {/* begin::Filter Button */}\n      <button\n        disabled={isLoading}\n        type='button'\n        className='btn btn-light-primary me-3'\n        data-kt-menu-trigger='click'\n        data-kt-menu-placement='bottom-end'\n      >\n        <KTIcon iconName='filter' className='fs-2' />\n        Filter\n      </button>\n      {/* end::Filter Button */}\n      {/* begin::SubMenu */}\n      <div className='menu menu-sub menu-sub-dropdown w-300px w-md-325px' data-kt-menu='true'>\n        {/* begin::Header */}\n        <div className='px-7 py-5'>\n          <div className='fs-5 text-dark fw-bolder'>Filter Options</div>\n        </div>\n        {/* end::Header */}\n\n        {/* begin::Separator */}\n        <div className='separator border-gray-200'></div>\n        {/* end::Separator */}\n\n        {/* begin::Content */}\n        <div className='px-7 py-5' data-kt-user-table-filter='form'>\n          {/* begin::Input group */}\n          <div className='mb-10'>\n            <label className='form-label fs-6 fw-bold'>Role:</label>\n            <select\n              className='form-select form-select-solid fw-bolder'\n              data-kt-select2='true'\n              data-placeholder='Select option'\n              data-allow-clear='true'\n              data-kt-user-table-filter='role'\n              data-hide-search='true'\n              onChange={(e) => setRole(e.target.value)}\n              value={role}\n            >\n              <option value=''></option>\n              <option value='Administrator'>Administrator</option>\n              <option value='Analyst'>Analyst</option>\n              <option value='Developer'>Developer</option>\n              <option value='Support'>Support</option>\n              <option value='Trial'>Trial</option>\n            </select>\n          </div>\n          {/* end::Input group */}\n\n          {/* begin::Input group */}\n          <div className='mb-10'>\n            <label className='form-label fs-6 fw-bold'>Last login:</label>\n            <select\n              className='form-select form-select-solid fw-bolder'\n              data-kt-select2='true'\n              data-placeholder='Select option'\n              data-allow-clear='true'\n              data-kt-user-table-filter='two-step'\n              data-hide-search='true'\n              onChange={(e) => setLastLogin(e.target.value)}\n              value={lastLogin}\n            >\n              <option value=''></option>\n              <option value='Yesterday'>Yesterday</option>\n              <option value='20 mins ago'>20 mins ago</option>\n              <option value='5 hours ago'>5 hours ago</option>\n              <option value='2 days ago'>2 days ago</option>\n            </select>\n          </div>\n          {/* end::Input group */}\n\n          {/* begin::Actions */}\n          <div className='d-flex justify-content-end'>\n            <button\n              type='button'\n              disabled={isLoading}\n              onClick={filterData}\n              className='btn btn-light btn-active-light-primary fw-bold me-2 px-6'\n              data-kt-menu-dismiss='true'\n              data-kt-user-table-filter='reset'\n            >\n              Reset\n            </button>\n            <button\n              disabled={isLoading}\n              type='button'\n              onClick={resetData}\n              className='btn btn-primary fw-bold px-6'\n              data-kt-menu-dismiss='true'\n              data-kt-user-table-filter='filter'\n            >\n              Apply\n            </button>\n          </div>\n          {/* end::Actions */}\n        </div>\n        {/* end::Content */}\n      </div>\n      {/* end::SubMenu */}\n    </>\n  )\n}\n\nexport {UsersListFilter}\n","import {KTIcon} from '../../../../../../../_metronic/helpers'\nimport {useListView} from '../../core/ListViewProvider'\nimport {UsersListFilter} from './UsersListFilter'\n\nconst UsersListToolbar = () => {\n  const {setItemIdForUpdate} = useListView()\n  const openAddUserModal = () => {\n    setItemIdForUpdate(null)\n  }\n\n  return (\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\n      <UsersListFilter />\n\n      {/* begin::Export */}\n      <button type='button' className='btn btn-light-primary me-3'>\n        <KTIcon iconName='exit-up' className='fs-2' />\n        Export\n      </button>\n      {/* end::Export */}\n\n      {/* begin::Add user */}\n      <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\n        <KTIcon iconName='plus' className='fs-2' />\n        Add User\n      </button>\n      {/* end::Add user */}\n    </div>\n  )\n}\n\nexport {UsersListToolbar}\n","import {useQueryClient, useMutation} from 'react-query'\nimport {QUERIES} from '../../../../../../../_metronic/helpers'\nimport {useListView} from '../../core/ListViewProvider'\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\nimport {deleteSelectedUsers} from '../../core/_requests'\n\nconst UsersListGrouping = () => {\n  const {selected, clearSelected} = useListView()\n  const queryClient = useQueryClient()\n  const {query} = useQueryResponse()\n\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\n    // 💡 response of the mutation is passed to onSuccess\n    onSuccess: () => {\n      // ✅ update detail view directly\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\n      clearSelected()\n    },\n  })\n\n  return (\n    <div className='d-flex justify-content-end align-items-center'>\n      <div className='fw-bolder me-5'>\n        <span className='me-2'>{selected.length}</span> Selected\n      </div>\n\n      <button\n        type='button'\n        className='btn btn-danger'\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\n      >\n        Delete Selected\n      </button>\n    </div>\n  )\n}\n\nexport {UsersListGrouping}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport {useEffect, useState} from 'react'\nimport {initialQueryState, KTIcon, useDebounce} from '../../../../../../../_metronic/helpers'\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\n\nconst UsersListSearchComponent = () => {\n  const {updateState} = useQueryRequest()\n  const [searchTerm, setSearchTerm] = useState<string>('')\n  // Debounce search term so that it only gives us latest value ...\n  // ... if searchTerm has not been updated within last 500ms.\n  // The goal is to only have the API call fire when user stops typing ...\n  // ... so that we aren't hitting our API rapidly.\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\n  // Effect for API call\n  useEffect(\n    () => {\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\n      }\n    },\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\n    // More details about useDebounce: https://usehooks.com/useDebounce/\n  )\n\n  return (\n    <div className='card-title'>\n      {/* begin::Search */}\n      <div className='d-flex align-items-center position-relative my-1'>\n        <KTIcon iconName='magnifier' className='fs-1 position-absolute ms-6' />\n        <input\n          type='text'\n          data-kt-user-table-filter='search'\n          className='form-control form-control-solid w-250px ps-14'\n          placeholder='Search user'\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n      </div>\n      {/* end::Search */}\n    </div>\n  )\n}\n\nexport {UsersListSearchComponent}\n","import {useListView} from '../../core/ListViewProvider'\nimport {UsersListToolbar} from './UserListToolbar'\nimport {UsersListGrouping} from './UsersListGrouping'\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\n\nconst UsersListHeader = () => {\n  const {selected} = useListView()\n  return (\n    <div className='card-header border-0 pt-6'>\n      <UsersListSearchComponent />\n      {/* begin::Card toolbar */}\n      <div className='card-toolbar'>\n        {/* begin::Group actions */}\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\n        {/* end::Group actions */}\n      </div>\n      {/* end::Card toolbar */}\n    </div>\n  )\n}\n\nexport {UsersListHeader}\n","// @ts-nocheck\nimport {FC} from 'react'\nimport {ColumnInstance} from 'react-table'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  column: ColumnInstance<User>\n}\n\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\n  <>\n    {column.Header && typeof column.Header === 'string' ? (\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n    ) : (\n      column.render('Header')\n    )}\n  </>\n)\n\nexport {CustomHeaderColumn}\n","// @ts-nocheck\nimport clsx from 'clsx'\nimport {FC} from 'react'\nimport {Row} from 'react-table'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  row: Row<User>\n}\n\nconst CustomRow: FC<Props> = ({row}) => (\n  <tr {...row.getRowProps()}>\n    {row.cells.map((cell) => {\n      return (\n        <td\n          {...cell.getCellProps()}\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\n        >\n          {cell.render('Cell')}\n        </td>\n      )\n    })}\n  </tr>\n)\n\nexport {CustomRow}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport clsx from 'clsx'\nimport {FC} from 'react'\nimport {toAbsoluteUrl} from '../../../../../../../_metronic/helpers'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  user: User\n}\n\nconst UserInfoCell: FC<Props> = ({user}) => (\n  <div className='d-flex align-items-center'>\n    {/* begin:: Avatar */}\n    <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\n      <a href='#'>\n        {user.avatar ? (\n          <div className='symbol-label'>\n            <img src={toAbsoluteUrl(`/media/${user.avatar}`)} alt={user.name} className='w-100' />\n          </div>\n        ) : (\n          <div\n            className={clsx(\n              'symbol-label fs-3',\n              `bg-light-${user.initials?.state}`,\n              `text-${user.initials?.state}`\n            )}\n          >\n            {user.initials?.label}\n          </div>\n        )}\n      </a>\n    </div>\n    <div className='d-flex flex-column'>\n      <a href='#' className='text-gray-800 text-hover-primary mb-1'>\n        {user.name}\n      </a>\n      <span>{user.email}</span>\n    </div>\n  </div>\n)\n\nexport {UserInfoCell}\n","import {FC} from 'react'\n\ntype Props = {\n  last_login?: string\n}\n\nconst UserLastLoginCell: FC<Props> = ({last_login}) => (\n  <div className='badge badge-light fw-bolder'>{last_login}</div>\n)\n\nexport {UserLastLoginCell}\n","import {FC} from 'react'\n\ntype Props = {\n  two_steps?: boolean\n}\n\nconst UserTwoStepsCell: FC<Props> = ({two_steps}) => (\n  <> {two_steps && <div className='badge badge-light-success fw-bolder'>Enabled</div>}</>\n)\n\nexport {UserTwoStepsCell}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport {FC, useEffect} from 'react'\nimport {useMutation, useQueryClient} from 'react-query'\nimport {MenuComponent} from '../../../../../../../_metronic/assets/ts/components'\nimport {ID, KTIcon, QUERIES} from '../../../../../../../_metronic/helpers'\nimport {useListView} from '../../core/ListViewProvider'\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\nimport {deleteUser} from '../../core/_requests'\n\ntype Props = {\n  id: ID\n}\n\nconst UserActionsCell: FC<Props> = ({id}) => {\n  const {setItemIdForUpdate} = useListView()\n  const {query} = useQueryResponse()\n  const queryClient = useQueryClient()\n\n  useEffect(() => {\n    MenuComponent.reinitialization()\n  }, [])\n\n  const openEditModal = () => {\n    setItemIdForUpdate(id)\n  }\n\n  const deleteItem = useMutation(() => deleteUser(id), {\n    // 💡 response of the mutation is passed to onSuccess\n    onSuccess: () => {\n      // ✅ update detail view directly\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\n    },\n  })\n\n  return (\n    <>\n      <a\n        href='#'\n        className='btn btn-light btn-active-light-primary btn-sm'\n        data-kt-menu-trigger='click'\n        data-kt-menu-placement='bottom-end'\n      >\n        Actions\n        <KTIcon iconName='down' className='fs-5 m-0' />\n      </a>\n      {/* begin::Menu */}\n      <div\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\n        data-kt-menu='true'\n      >\n        {/* begin::Menu item */}\n        <div className='menu-item px-3'>\n          <a className='menu-link px-3' onClick={openEditModal}>\n            Edit\n          </a>\n        </div>\n        {/* end::Menu item */}\n\n        {/* begin::Menu item */}\n        <div className='menu-item px-3'>\n          <a\n            className='menu-link px-3'\n            data-kt-users-table-filter='delete_row'\n            onClick={async () => await deleteItem.mutateAsync()}\n          >\n            Delete\n          </a>\n        </div>\n        {/* end::Menu item */}\n      </div>\n      {/* end::Menu */}\n    </>\n  )\n}\n\nexport {UserActionsCell}\n","import {FC, useMemo} from 'react'\nimport {ID} from '../../../../../../../_metronic/helpers'\nimport {useListView} from '../../core/ListViewProvider'\n\ntype Props = {\n  id: ID\n}\n\nconst UserSelectionCell: FC<Props> = ({id}) => {\n  const {selected, onSelect} = useListView()\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\n  return (\n    <div className='form-check form-check-custom form-check-solid'>\n      <input\n        className='form-check-input'\n        type='checkbox'\n        data-kt-check={isSelected}\n        data-kt-check-target='#kt_table_users .form-check-input'\n        checked={isSelected}\n        onChange={() => onSelect(id)}\n      />\n    </div>\n  )\n}\n\nexport {UserSelectionCell}\n","import clsx from 'clsx'\nimport {FC, PropsWithChildren, useMemo} from 'react'\nimport {HeaderProps} from 'react-table'\nimport {initialQueryState} from '../../../../../../../_metronic/helpers'\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  className?: string\n  title?: string\n  tableProps: PropsWithChildren<HeaderProps<User>>\n}\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\n  const id = tableProps.column.id\n  const {state, updateState} = useQueryRequest()\n\n  const isSelectedForSorting = useMemo(() => {\n    return state.sort && state.sort === id\n  }, [state, id])\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\n\n  const sortColumn = () => {\n    // avoid sorting for these columns\n    if (id === 'actions' || id === 'selection') {\n      return\n    }\n\n    if (!isSelectedForSorting) {\n      // enable sort asc\n      updateState({sort: id, order: 'asc', ...initialQueryState})\n      return\n    }\n\n    if (isSelectedForSorting && order !== undefined) {\n      if (order === 'asc') {\n        // enable sort desc\n        updateState({sort: id, order: 'desc', ...initialQueryState})\n        return\n      }\n\n      // disable sort\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\n    }\n  }\n\n  return (\n    <th\n      {...tableProps.column.getHeaderProps()}\n      className={clsx(\n        className,\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\n      )}\n      style={{cursor: 'pointer'}}\n      onClick={sortColumn}\n    >\n      {title}\n    </th>\n  )\n}\n\nexport {UserCustomHeader}\n","import {FC, PropsWithChildren} from 'react'\nimport {HeaderProps} from 'react-table'\nimport {useListView} from '../../core/ListViewProvider'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  tableProps: PropsWithChildren<HeaderProps<User>>\n}\n\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\n  const {isAllSelected, onSelectAll} = useListView()\n  return (\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\n        <input\n          className='form-check-input'\n          type='checkbox'\n          data-kt-check={isAllSelected}\n          data-kt-check-target='#kt_table_users .form-check-input'\n          checked={isAllSelected}\n          onChange={onSelectAll}\n        />\n      </div>\n    </th>\n  )\n}\n\nexport {UserSelectionHeader}\n","// @ts-nocheck\nimport {Column} from 'react-table'\nimport {UserInfoCell} from './UserInfoCell'\nimport {UserLastLoginCell} from './UserLastLoginCell'\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\nimport {UserActionsCell} from './UserActionsCell'\nimport {UserSelectionCell} from './UserSelectionCell'\nimport {UserCustomHeader} from './UserCustomHeader'\nimport {UserSelectionHeader} from './UserSelectionHeader'\nimport {User} from '../../core/_models'\n\nconst usersColumns: ReadonlyArray<Column<User>> = [\n  {\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\n    id: 'selection',\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\n  },\n  {\n    Header: (props) => <UserCustomHeader tableProps={props} title='Name' className='min-w-125px' />,\n    id: 'name',\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\n  },\n  {\n    Header: (props) => <UserCustomHeader tableProps={props} title='Role' className='min-w-125px' />,\n    accessor: 'role',\n  },\n  {\n    Header: (props) => (\n      <UserCustomHeader tableProps={props} title='Last login' className='min-w-125px' />\n    ),\n    id: 'last_login',\n    Cell: ({...props}) => <UserLastLoginCell last_login={props.data[props.row.index].last_login} />,\n  },\n  {\n    Header: (props) => (\n      <UserCustomHeader tableProps={props} title='Two steps' className='min-w-125px' />\n    ),\n    id: 'two_steps',\n    Cell: ({...props}) => <UserTwoStepsCell two_steps={props.data[props.row.index].two_steps} />,\n  },\n  {\n    Header: (props) => (\n      <UserCustomHeader tableProps={props} title='Joined day' className='min-w-125px' />\n    ),\n    accessor: 'joined_day',\n  },\n  {\n    Header: (props) => (\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\n    ),\n    id: 'actions',\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\n  },\n]\n\nexport {usersColumns}\n","const UsersListLoading = () => {\n  const styles = {\n    borderRadius: '0.475rem',\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\n    backgroundColor: '#fff',\n    color: '#7e8299',\n    fontWeight: '500',\n    margin: '0',\n    width: 'auto',\n    padding: '1rem 2rem',\n    top: 'calc(50% - 2rem)',\n    left: 'calc(50% - 4rem)',\n  }\n\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\n}\n\nexport {UsersListLoading}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport clsx from 'clsx'\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\n\nconst mappedLabel = (label: string): string => {\n  if (label === '&laquo; Previous') {\n    return 'Previous'\n  }\n\n  if (label === 'Next &raquo;') {\n    return 'Next'\n  }\n\n  return label\n}\n\nconst UsersListPagination = () => {\n  const pagination = useQueryResponsePagination()\n  const isLoading = useQueryResponseLoading()\n  const {updateState} = useQueryRequest()\n  const updatePage = (page: number | null) => {\n    if (!page || isLoading || pagination.page === page) {\n      return\n    }\n\n    updateState({page, items_per_page: pagination.items_per_page || 10})\n  }\n\n  return (\n    <div className='row'>\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\n        <div id='kt_table_users_paginate'>\n          <ul className='pagination'>\n            {pagination.links\n              ?.map((link) => {\n                return {...link, label: mappedLabel(link.label)}\n              })\n              .map((link) => (\n                <li\n                  key={link.label}\n                  className={clsx('page-item', {\n                    active: pagination.page === link.page,\n                    disabled: isLoading,\n                    previous: link.label === 'Previous',\n                    next: link.label === 'Next',\n                  })}\n                >\n                  <a\n                    className={clsx('page-link', {\n                      'page-text': link.label === 'Previous' || link.label === 'Next',\n                      'me-5': link.label === 'Previous',\n                    })}\n                    onClick={() => updatePage(link.page)}\n                    style={{cursor: 'pointer'}}\n                  >\n                    {mappedLabel(link.label)}\n                  </a>\n                </li>\n              ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport {UsersListPagination}\n","import {useMemo} from 'react'\nimport {useTable, ColumnInstance, Row} from 'react-table'\nimport {CustomHeaderColumn} from '../table/columns/CustomHeaderColumn'\nimport {CustomRow} from '../table/columns/CustomRow'\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\nimport {usersColumns} from './columns/_columns'\nimport {User} from '../core/_models'\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\nimport {KTCardBody} from '../../../../../../_metronic/helpers'\n\nconst UsersTable = () => {\n  const users = useQueryResponseData()\n  const isLoading = useQueryResponseLoading()\n  const data = useMemo(() => users, [users])\n  const columns = useMemo(() => usersColumns, [])\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\n    columns,\n    data,\n  })\n\n  return (\n    <KTCardBody className='py-4'>\n      <div className='table-responsive'>\n        <table\n          id='kt_table_users'\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\n          {...getTableProps()}\n        >\n          <thead>\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\n              {headers.map((column: ColumnInstance<User>) => (\n                <CustomHeaderColumn key={column.id} column={column} />\n              ))}\n            </tr>\n          </thead>\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\n            {rows.length > 0 ? (\n              rows.map((row: Row<User>, i) => {\n                prepareRow(row)\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\n              })\n            ) : (\n              <tr>\n                <td colSpan={7}>\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\n                    No matching records found\n                  </div>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      <UsersListPagination />\n      {isLoading && <UsersListLoading />}\n    </KTCardBody>\n  )\n}\n\nexport {UsersTable}\n","import {KTIcon} from '../../../../../../_metronic/helpers'\nimport {useListView} from '../core/ListViewProvider'\n\nconst UserEditModalHeader = () => {\n  const {setItemIdForUpdate} = useListView()\n\n  return (\n    <div className='modal-header'>\n      {/* begin::Modal title */}\n      <h2 className='fw-bolder'>Add User</h2>\n      {/* end::Modal title */}\n\n      {/* begin::Close */}\n      <div\n        className='btn btn-icon btn-sm btn-active-icon-primary'\n        data-kt-users-modal-action='close'\n        onClick={() => setItemIdForUpdate(undefined)}\n        style={{cursor: 'pointer'}}\n      >\n        <KTIcon iconName='cross' className='fs-1' />\n      </div>\n      {/* end::Close */}\n    </div>\n  )\n}\n\nexport {UserEditModalHeader}\n","import {ID, Response} from '../../../../../../_metronic/helpers'\nexport type User = {\n  id?: ID\n  name?: string\n  avatar?: string\n  email?: string\n  position?: string\n  role?: string\n  last_login?: string\n  two_steps?: boolean\n  joined_day?: string\n  online?: boolean\n  initials?: {\n    label: string\n    state: string\n  }\n}\n\nexport type UsersQueryResponse = Response<Array<User>>\n\nexport const initialUser: User = {\n  avatar: 'avatars/300-6.jpg',\n  position: 'Art Director',\n  role: 'Administrator',\n  name: '',\n  email: '',\n}\n","import {FC, useState} from 'react'\nimport * as Yup from 'yup'\nimport {useFormik} from 'formik'\nimport {isNotEmpty, toAbsoluteUrl} from '../../../../../../_metronic/helpers'\nimport {initialUser, User} from '../core/_models'\nimport clsx from 'clsx'\nimport {useListView} from '../core/ListViewProvider'\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\nimport {createUser, updateUser} from '../core/_requests'\nimport {useQueryResponse} from '../core/QueryResponseProvider'\n\ntype Props = {\n  isUserLoading: boolean\n  user: User\n}\n\nconst editUserSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Wrong email format')\n    .min(3, 'Minimum 3 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .required('Email is required'),\n  name: Yup.string()\n    .min(3, 'Minimum 3 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .required('Name is required'),\n})\n\nconst UserEditModalForm: FC<Props> = ({user, isUserLoading}) => {\n  const {setItemIdForUpdate} = useListView()\n  const {refetch} = useQueryResponse()\n\n  const [userForEdit] = useState<User>({\n    ...user,\n    avatar: user.avatar || initialUser.avatar,\n    role: user.role || initialUser.role,\n    position: user.position || initialUser.position,\n    name: user.name || initialUser.name,\n    email: user.email || initialUser.email,\n  })\n\n  const cancel = (withRefresh?: boolean) => {\n    if (withRefresh) {\n      refetch()\n    }\n    setItemIdForUpdate(undefined)\n  }\n\n  const blankImg = toAbsoluteUrl('/media/svg/avatars/blank.svg')\n  const userAvatarImg = toAbsoluteUrl(`/media/${userForEdit.avatar}`)\n\n  const formik = useFormik({\n    initialValues: userForEdit,\n    validationSchema: editUserSchema,\n    onSubmit: async (values, {setSubmitting}) => {\n      setSubmitting(true)\n      try {\n        if (isNotEmpty(values.id)) {\n          await updateUser(values)\n        } else {\n          await createUser(values)\n        }\n      } catch (ex) {\n        console.error(ex)\n      } finally {\n        setSubmitting(true)\n        cancel(true)\n      }\n    },\n  })\n\n  return (\n    <>\n      <form id='kt_modal_add_user_form' className='form' onSubmit={formik.handleSubmit} noValidate>\n        {/* begin::Scroll */}\n        <div\n          className='d-flex flex-column scroll-y me-n7 pe-7'\n          id='kt_modal_add_user_scroll'\n          data-kt-scroll='true'\n          data-kt-scroll-activate='{default: false, lg: true}'\n          data-kt-scroll-max-height='auto'\n          data-kt-scroll-dependencies='#kt_modal_add_user_header'\n          data-kt-scroll-wrappers='#kt_modal_add_user_scroll'\n          data-kt-scroll-offset='300px'\n        >\n          {/* begin::Input group */}\n          <div className='fv-row mb-7'>\n            {/* begin::Label */}\n            <label className='d-block fw-bold fs-6 mb-5'>Avatar</label>\n            {/* end::Label */}\n\n            {/* begin::Image input */}\n            <div\n              className='image-input image-input-outline'\n              data-kt-image-input='true'\n              style={{backgroundImage: `url('${blankImg}')`}}\n            >\n              {/* begin::Preview existing avatar */}\n              <div\n                className='image-input-wrapper w-125px h-125px'\n                style={{backgroundImage: `url('${userAvatarImg}')`}}\n              ></div>\n              {/* end::Preview existing avatar */}\n\n              {/* begin::Label */}\n              {/* <label\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\n              data-kt-image-input-action='change'\n              data-bs-toggle='tooltip'\n              title='Change avatar'\n            >\n              <i className='bi bi-pencil-fill fs-7'></i>\n\n              <input type='file' name='avatar' accept='.png, .jpg, .jpeg' />\n              <input type='hidden' name='avatar_remove' />\n            </label> */}\n              {/* end::Label */}\n\n              {/* begin::Cancel */}\n              {/* <span\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\n              data-kt-image-input-action='cancel'\n              data-bs-toggle='tooltip'\n              title='Cancel avatar'\n            >\n              <i className='bi bi-x fs-2'></i>\n            </span> */}\n              {/* end::Cancel */}\n\n              {/* begin::Remove */}\n              {/* <span\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\n              data-kt-image-input-action='remove'\n              data-bs-toggle='tooltip'\n              title='Remove avatar'\n            >\n              <i className='bi bi-x fs-2'></i>\n            </span> */}\n              {/* end::Remove */}\n            </div>\n            {/* end::Image input */}\n\n            {/* begin::Hint */}\n            {/* <div className='form-text'>Allowed file types: png, jpg, jpeg.</div> */}\n            {/* end::Hint */}\n          </div>\n          {/* end::Input group */}\n\n          {/* begin::Input group */}\n          <div className='fv-row mb-7'>\n            {/* begin::Label */}\n            <label className='required fw-bold fs-6 mb-2'>Full Name</label>\n            {/* end::Label */}\n\n            {/* begin::Input */}\n            <input\n              placeholder='Full name'\n              {...formik.getFieldProps('name')}\n              type='text'\n              name='name'\n              className={clsx(\n                'form-control form-control-solid mb-3 mb-lg-0',\n                {'is-invalid': formik.touched.name && formik.errors.name},\n                {\n                  'is-valid': formik.touched.name && !formik.errors.name,\n                }\n              )}\n              autoComplete='off'\n              disabled={formik.isSubmitting || isUserLoading}\n            />\n            {formik.touched.name && formik.errors.name && (\n              <div className='fv-plugins-message-container'>\n                <div className='fv-help-block'>\n                  <span role='alert'>{formik.errors.name}</span>\n                </div>\n              </div>\n            )}\n            {/* end::Input */}\n          </div>\n          {/* end::Input group */}\n\n          {/* begin::Input group */}\n          <div className='fv-row mb-7'>\n            {/* begin::Label */}\n            <label className='required fw-bold fs-6 mb-2'>Email</label>\n            {/* end::Label */}\n\n            {/* begin::Input */}\n            <input\n              placeholder='Email'\n              {...formik.getFieldProps('email')}\n              className={clsx(\n                'form-control form-control-solid mb-3 mb-lg-0',\n                {'is-invalid': formik.touched.email && formik.errors.email},\n                {\n                  'is-valid': formik.touched.email && !formik.errors.email,\n                }\n              )}\n              type='email'\n              name='email'\n              autoComplete='off'\n              disabled={formik.isSubmitting || isUserLoading}\n            />\n            {/* end::Input */}\n            {formik.touched.email && formik.errors.email && (\n              <div className='fv-plugins-message-container'>\n                <span role='alert'>{formik.errors.email}</span>\n              </div>\n            )}\n          </div>\n          {/* end::Input group */}\n\n          {/* begin::Input group */}\n          <div className='mb-7'>\n            {/* begin::Label */}\n            <label className='required fw-bold fs-6 mb-5'>Role</label>\n            {/* end::Label */}\n            {/* begin::Roles */}\n            {/* begin::Input row */}\n            <div className='d-flex fv-row'>\n              {/* begin::Radio */}\n              <div className='form-check form-check-custom form-check-solid'>\n                {/* begin::Input */}\n                <input\n                  className='form-check-input me-3'\n                  {...formik.getFieldProps('role')}\n                  name='role'\n                  type='radio'\n                  value='Administrator'\n                  id='kt_modal_update_role_option_0'\n                  checked={formik.values.role === 'Administrator'}\n                  disabled={formik.isSubmitting || isUserLoading}\n                />\n\n                {/* end::Input */}\n                {/* begin::Label */}\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_0'>\n                  <div className='fw-bolder text-gray-800'>Administrator</div>\n                  <div className='text-gray-600'>\n                    Best for business owners and company administrators\n                  </div>\n                </label>\n                {/* end::Label */}\n              </div>\n              {/* end::Radio */}\n            </div>\n            {/* end::Input row */}\n            <div className='separator separator-dashed my-5'></div>\n            {/* begin::Input row */}\n            <div className='d-flex fv-row'>\n              {/* begin::Radio */}\n              <div className='form-check form-check-custom form-check-solid'>\n                {/* begin::Input */}\n                <input\n                  className='form-check-input me-3'\n                  {...formik.getFieldProps('role')}\n                  name='role'\n                  type='radio'\n                  value='Developer'\n                  id='kt_modal_update_role_option_1'\n                  checked={formik.values.role === 'Developer'}\n                  disabled={formik.isSubmitting || isUserLoading}\n                />\n                {/* end::Input */}\n                {/* begin::Label */}\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_1'>\n                  <div className='fw-bolder text-gray-800'>Developer</div>\n                  <div className='text-gray-600'>\n                    Best for developers or people primarily using the API\n                  </div>\n                </label>\n                {/* end::Label */}\n              </div>\n              {/* end::Radio */}\n            </div>\n            {/* end::Input row */}\n            <div className='separator separator-dashed my-5'></div>\n            {/* begin::Input row */}\n            <div className='d-flex fv-row'>\n              {/* begin::Radio */}\n              <div className='form-check form-check-custom form-check-solid'>\n                {/* begin::Input */}\n                <input\n                  className='form-check-input me-3'\n                  {...formik.getFieldProps('role')}\n                  name='role'\n                  type='radio'\n                  value='Analyst'\n                  id='kt_modal_update_role_option_2'\n                  checked={formik.values.role === 'Analyst'}\n                  disabled={formik.isSubmitting || isUserLoading}\n                />\n\n                {/* end::Input */}\n                {/* begin::Label */}\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_2'>\n                  <div className='fw-bolder text-gray-800'>Analyst</div>\n                  <div className='text-gray-600'>\n                    Best for people who need full access to analytics data, but don't need to update\n                    business settings\n                  </div>\n                </label>\n                {/* end::Label */}\n              </div>\n              {/* end::Radio */}\n            </div>\n            {/* end::Input row */}\n            <div className='separator separator-dashed my-5'></div>\n            {/* begin::Input row */}\n            <div className='d-flex fv-row'>\n              {/* begin::Radio */}\n              <div className='form-check form-check-custom form-check-solid'>\n                {/* begin::Input */}\n                <input\n                  className='form-check-input me-3'\n                  {...formik.getFieldProps('role')}\n                  name='role'\n                  type='radio'\n                  value='Support'\n                  id='kt_modal_update_role_option_3'\n                  checked={formik.values.role === 'Support'}\n                  disabled={formik.isSubmitting || isUserLoading}\n                />\n                {/* end::Input */}\n                {/* begin::Label */}\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_3'>\n                  <div className='fw-bolder text-gray-800'>Support</div>\n                  <div className='text-gray-600'>\n                    Best for employees who regularly refund payments and respond to disputes\n                  </div>\n                </label>\n                {/* end::Label */}\n              </div>\n              {/* end::Radio */}\n            </div>\n            {/* end::Input row */}\n            <div className='separator separator-dashed my-5'></div>\n            {/* begin::Input row */}\n            <div className='d-flex fv-row'>\n              {/* begin::Radio */}\n              <div className='form-check form-check-custom form-check-solid'>\n                {/* begin::Input */}\n                <input\n                  className='form-check-input me-3'\n                  {...formik.getFieldProps('role')}\n                  name='role'\n                  type='radio'\n                  id='kt_modal_update_role_option_4'\n                  value='Trial'\n                  checked={formik.values.role === 'Trial'}\n                  disabled={formik.isSubmitting || isUserLoading}\n                />\n                {/* end::Input */}\n                {/* begin::Label */}\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_4'>\n                  <div className='fw-bolder text-gray-800'>Trial</div>\n                  <div className='text-gray-600'>\n                    Best for people who need to preview content data, but don't need to make any\n                    updates\n                  </div>\n                </label>\n                {/* end::Label */}\n              </div>\n              {/* end::Radio */}\n            </div>\n            {/* end::Input row */}\n            {/* end::Roles */}\n          </div>\n          {/* end::Input group */}\n        </div>\n        {/* end::Scroll */}\n\n        {/* begin::Actions */}\n        <div className='text-center pt-15'>\n          <button\n            type='reset'\n            onClick={() => cancel()}\n            className='btn btn-light me-3'\n            data-kt-users-modal-action='cancel'\n            disabled={formik.isSubmitting || isUserLoading}\n          >\n            Discard\n          </button>\n\n          <button\n            type='submit'\n            className='btn btn-primary'\n            data-kt-users-modal-action='submit'\n            disabled={isUserLoading || formik.isSubmitting || !formik.isValid || !formik.touched}\n          >\n            <span className='indicator-label'>Submit</span>\n            {(formik.isSubmitting || isUserLoading) && (\n              <span className='indicator-progress'>\n                Please wait...{' '}\n                <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\n              </span>\n            )}\n          </button>\n        </div>\n        {/* end::Actions */}\n      </form>\n      {(formik.isSubmitting || isUserLoading) && <UsersListLoading />}\n    </>\n  )\n}\n\nexport {UserEditModalForm}\n","import {useQuery} from 'react-query'\nimport {UserEditModalForm} from './UserEditModalForm'\nimport {isNotEmpty, QUERIES} from '../../../../../../_metronic/helpers'\nimport {useListView} from '../core/ListViewProvider'\nimport {getUserById} from '../core/_requests'\n\nconst UserEditModalFormWrapper = () => {\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\n  const {\n    isLoading,\n    data: user,\n    error,\n  } = useQuery(\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\n    () => {\n      return getUserById(itemIdForUpdate)\n    },\n    {\n      cacheTime: 0,\n      enabled: enabledQuery,\n      onError: (err) => {\n        setItemIdForUpdate(undefined)\n        console.error(err)\n      },\n    }\n  )\n\n  if (!itemIdForUpdate) {\n    return <UserEditModalForm isUserLoading={isLoading} user={{id: undefined}} />\n  }\n\n  if (!isLoading && !error && user) {\n    return <UserEditModalForm isUserLoading={isLoading} user={user} />\n  }\n\n  return null\n}\n\nexport {UserEditModalFormWrapper}\n","import {useEffect} from 'react'\nimport {UserEditModalHeader} from './UserEditModalHeader'\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\n\nconst UserEditModal = () => {\n  useEffect(() => {\n    document.body.classList.add('modal-open')\n    return () => {\n      document.body.classList.remove('modal-open')\n    }\n  }, [])\n\n  return (\n    <>\n      <div\n        className='modal fade show d-block'\n        id='kt_modal_add_user'\n        role='dialog'\n        tabIndex={-1}\n        aria-modal='true'\n      >\n        {/* begin::Modal dialog */}\n        <div className='modal-dialog modal-dialog-centered mw-650px'>\n          {/* begin::Modal content */}\n          <div className='modal-content'>\n            <UserEditModalHeader />\n            {/* begin::Modal body */}\n            <div className='modal-body scroll-y mx-5 mx-xl-15 my-7'>\n              <UserEditModalFormWrapper />\n            </div>\n            {/* end::Modal body */}\n          </div>\n          {/* end::Modal content */}\n        </div>\n        {/* end::Modal dialog */}\n      </div>\n      {/* begin::Modal Backdrop */}\n      <div className='modal-backdrop fade show'></div>\n      {/* end::Modal Backdrop */}\n    </>\n  )\n}\n\nexport {UserEditModal}\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\nimport {UsersListHeader} from './components/header/UsersListHeader'\nimport {UsersTable} from './table/UsersTable'\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\nimport {KTCard} from '../../../../../_metronic/helpers'\n\nconst UsersList = () => {\n  const {itemIdForUpdate} = useListView()\n  return (\n    <>\n      <KTCard>\n        <UsersListHeader />\n        <UsersTable />\n      </KTCard>\n      {itemIdForUpdate !== undefined && <UserEditModal />}\n    </>\n  )\n}\n\nconst UsersListWrapper = () => (\n  <QueryRequestProvider>\n    <QueryResponseProvider>\n      <ListViewProvider>\n        <UsersList />\n      </ListViewProvider>\n    </QueryResponseProvider>\n  </QueryRequestProvider>\n)\n\nexport {UsersListWrapper}\n","import {Navigate, Outlet, Route, Routes} from 'react-router-dom'\nimport {PageLink, PageTitle} from '../../../../_metronic/layout/core'\nimport {UsersListWrapper} from './users-list/UsersList'\n\nconst usersBreadcrumbs: Array<PageLink> = [\n  {\n    title: 'User Management',\n    path: '/apps/user-management/users',\n    isSeparator: false,\n    isActive: false,\n  },\n  {\n    title: '',\n    path: '',\n    isSeparator: true,\n    isActive: false,\n  },\n]\n\nconst UsersPage = () => {\n  return (\n    <Routes>\n      <Route element={<Outlet />}>\n        <Route\n          path='users'\n          element={\n            <>\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Users list</PageTitle>\n              <UsersListWrapper />\n            </>\n          }\n        />\n      </Route>\n      <Route index element={<Navigate to='/apps/user-management/users' />} />\n    </Routes>\n  )\n}\n\nexport default UsersPage\n"],"names":["API_URL","process","REACT_APP_THEME_API_URL","USER_URL","concat","GET_USERS_URL","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","_ref","children","state","setState","useState","_jsx","Provider","value","updateState","updates","updatedState","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","query","setQuery","stringifyRequestQuery","updatedQuery","useMemo","useEffect","isFetching","refetch","data","response","useQuery","QUERIES","USERS_LIST","axios","get","then","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","id","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","UsersListFilter","role","setRole","lastLogin","setLastLogin","MenuComponent","reinitialization","_jsxs","_Fragment","type","className","KTIcon","iconName","onChange","e","target","onClick","filterData","filter","last_login","initialQueryState","resetData","undefined","UsersListToolbar","openAddUserModal","UsersListGrouping","queryClient","useQueryClient","deleteSelectedItems","useMutation","userIds","requests","map","delete","all","deleteSelectedUsers","onSuccess","invalidateQueries","length","async","mutateAsync","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","search","placeholder","UsersListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserInfoCell","_user$initials","_user$initials2","_user$initials3","user","href","avatar","src","toAbsoluteUrl","alt","name","initials","label","email","UserLastLoginCell","UserTwoStepsCell","two_steps","UserActionsCell","deleteItem","deleteUser","userId","openEditModal","UserSelectionCell","isSelected","includes","checked","UserCustomHeader","title","tableProps","isSelectedForSorting","sort","order","style","cursor","sortColumn","UserSelectionHeader","usersColumns","props","Cell","index","_ref2","accessor","_ref3","_ref4","_ref5","UsersListLoading","borderRadius","boxShadow","backgroundColor","color","fontWeight","margin","width","padding","top","left","position","textAlign","mappedLabel","UsersListPagination","_pagination$links","pagination","useQueryResponsePagination","defaultPaginationState","links","payload","link","active","page","previous","next","items_per_page","UsersTable","users","columns","getTableProps","getTableBodyProps","headers","rows","prepareRow","useTable","KTCardBody","i","colSpan","UserEditModalHeader","initialUser","editUserSchema","Yup","shape","min","max","required","UserEditModalForm","isUserLoading","userForEdit","cancel","withRefresh","blankImg","userAvatarImg","formik","useFormik","initialValues","validationSchema","onSubmit","values","setSubmitting","isNotEmpty","post","updateUser","put","createUser","ex","console","error","handleSubmit","noValidate","backgroundImage","getFieldProps","touched","errors","autoComplete","isSubmitting","htmlFor","isValid","UserEditModalFormWrapper","enabledQuery","enabled","onError","err","UserEditModal","document","body","classList","add","remove","tabIndex","UsersList","KTCard","UsersListWrapper","usersBreadcrumbs","path","isSeparator","isActive","UsersPage","Routes","Route","element","Outlet","PageTitle","breadcrumbs","Navigate","to"],"sourceRoot":""}